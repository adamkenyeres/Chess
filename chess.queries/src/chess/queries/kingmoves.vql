package chess.queries

import "http://example.com/chessdiagram"

pattern kingMoves(king : King, square : Square, chess : Chess) {
	find square(king, kingSquare);
	find N(kingSquare, square);
	neg find pieceOnSquaree(square);
	Chess.square(chess, square);
} or {
	find square(king, kingSquare);
	find NE(kingSquare, square);
	neg find pieceOnSquaree(square);
	Chess.square(chess, square);
} or {
	find square(king, kingSquare);
	find E(kingSquare, square);
	neg find pieceOnSquaree(square);
	Chess.square(chess, square);
} or {
	find square(king, kingSquare);
	find SE(kingSquare, square);
	neg find pieceOnSquaree(square);
	Chess.square(chess, square);
} or {
	find square(king, kingSquare);
	find S(kingSquare, square);
	neg find pieceOnSquaree(square);
	Chess.square(chess, square);
} or {
	find square(king, kingSquare);
	find SW(kingSquare, square);
	neg find pieceOnSquaree(square);
	Chess.square(chess, square);
} or {
	find square(king, kingSquare);
	find W(kingSquare, square);
	neg find pieceOnSquaree(square);
	Chess.square(chess, square);
} or {
	find square(king, kingSquare);
	find NW(kingSquare, square);
	neg find pieceOnSquaree(square);
	Chess.square(chess, square);
} or {
	find square(king, queenSquare); //South East moves atacking
	find N(queenSquare, square);
	find pieceOnSquare(square, piece);
	find canAttack(king, piece);
	Chess.square(chess, square);
} or {
	find square(king, queenSquare); //South East moves atacking
	find NE(queenSquare, square);
	find pieceOnSquare(square, piece);
	find canAttack(king, piece);
	Chess.square(chess, square);
} or {
	find square(king, queenSquare); //South East moves atacking
	find E(queenSquare, square);
	find pieceOnSquare(square, piece);
	find canAttack(king, piece);
	Chess.square(chess, square);
} or {
	find square(king, queenSquare); //South East moves atacking
	find SE(queenSquare, square);
	find pieceOnSquare(square, piece);
	find canAttack(king, piece);
	Chess.square(chess, square);
} or {
	find square(king, queenSquare); //South East moves atacking
	find S(queenSquare, square);
	find pieceOnSquare(square, piece);
	find canAttack(king, piece);
	Chess.square(chess, square);
} or {
	find square(king, queenSquare); //South East moves atacking
	find SW(queenSquare, square);
	find pieceOnSquare(square, piece);
	find canAttack(king, piece);
	Chess.square(chess, square);
} or {
	find square(king, queenSquare); //South East moves atacking
	find W(queenSquare, square);
	find pieceOnSquare(square, piece);
	find canAttack(king, piece);
	Chess.square(chess, square);
} or {
	find square(king, queenSquare); //South East moves atacking
	find NW(queenSquare, square);
	find pieceOnSquare(square, piece);
	find canAttack(king, piece);
	Chess.square(chess, square);
} or {
	King.firstMove(king, firsMoveKing); //Casting All for possible ways
	check(firsMoveKing == true);
	find square(king, kingSquare);
	Square.id(square, 56);
	find pieceOnSquare(square, rook);
	find movesWest(kingSquare, _, square);
	Rook.firstMove(rook, firstRookMove);
	check(firstRookMove == true);
	Chess.square(chess, square);
} or {
	King.firstMove(king, firsMoveKing);
	check(firsMoveKing == true);
	find square(king, kingSquare);
	Square.id(square, 63);
	find pieceOnSquare(square, rook);
	find movesEast(kingSquare, _, square);
	Rook.firstMove(rook, firstRookMove);
	check(firstRookMove == true);
	Chess.square(chess, square);
} or {
	King.firstMove(king, firsMoveKing); //Casting for black king
	check(firsMoveKing == true);
	find square(king, kingSquare);
	Square.id(square, 0);
	find pieceOnSquare(square, rook);
	find movesWest(kingSquare, _, square);
	Rook.firstMove(rook, firstRookMove);
	check(firstRookMove == true);
	Chess.square(chess, square);
} or {
	King.firstMove(king, firsMoveKing);
	check(firsMoveKing == true);
	find square(king, kingSquare);
	Square.id(square, 7);
	find pieceOnSquare(square, rook);
	find movesEast(kingSquare, _, square);
	Rook.firstMove(rook, firstRookMove);
	check(firstRookMove == true);
	Chess.square(chess, square);
}

pattern blackKingMoves(king : King, square : Square, chess : Chess) {
	Chess.whitePlayerTurn(chess, boolTurn);
	check(boolTurn == false);
	King.colour(king, ::Black);
	find kingMoves(king, square, chess);
}

pattern whiteKingMoves(king : King, square : Square, chess : Chess) {
	Chess.whitePlayerTurn(chess, boolTurn);
	check(boolTurn == true);
	King.colour(king, ::White);
	find kingMoves(king, square, chess);
}


package chess.queries

import "http://example.com/chessdiagram"

/*Black Pawn moves */
pattern blackPawnMoves(piece : Pawn, square : Square, chess : Chess) {
//Stepping one ahead
	Pawn.colour(piece, ::Black);
	find squareForPiece(piece, squarePiece);
	find S(squarePiece, square);
	neg find pieceOnSquaree(square);
	//This is needed so there wont be isolated constraints
	Chess.blackPlayer.piece(chess, piece);

} or {
	Pawn.colour(piece, ::Black); //Two steps 
	find squareForPiece(piece, squarePiece);
	find S(squarePiece, squareNorth);
	find S(squareNorth, square);
	neg find pieceOnSquaree(squareNorth);
	neg find pieceOnSquaree(square);
	Pawn.firstMove(piece, bool);
	check(bool == true);
	Chess.blackPlayer.piece(chess, piece);
} or {
	Pawn.colour(piece, ::Black);
	find squareForPiece(piece, squarePiece);
	find SW(squarePiece, square);
	find squareContainsWhitePiece(square);
	Chess.blackPlayer.piece(chess, piece);
} or {
	Pawn.colour(piece, ::Black);
	find squareForPiece(piece, squarePiece);
	find SE(squarePiece, square);
	find squareContainsWhitePiece(square);
	Chess.blackPlayer.piece(chess, piece);
} or {
/*En passant if there is a pawn on the left to be hit */
	Pawn.colour(piece, ::Black);
	find squareForPiece(piece, pieceSquare);
	find W(pieceSquare, atackingSquare);
	find pieceOnSquare(atackingSquare, atackingPawn);
	find canAttack(piece, atackingPawn);
	Pawn.enPassantEnabled(atackingPawn, bool);
	check(bool == true);
	find S(atackingSquare, square);
	Chess.blackPlayer.piece(chess, piece);
} or {
/*En passant if there is a pawn on the right to be hit */
	Pawn.colour(piece, ::Black);
	find squareForPiece(piece, pieceSquare);
	find E(pieceSquare, atackingSquare);
	find pieceOnSquare(atackingSquare, atackingPawn);
	find canAttack(piece, atackingPawn);
	Pawn.enPassantEnabled(atackingPawn, bool);
	check(bool == true);
	find S(atackingSquare, square);
	Chess.blackPlayer.piece(chess, piece);
}
/*White Pawn moves */
pattern whitePawnMoves(piece : Pawn, square : Square, chess : Chess) {
	Pawn.colour(piece, ::White);
	find squareForPiece(piece, squarePiece);
	find N(squarePiece, square);
	neg find pieceOnSquaree(square);
	Chess.whitePlayer.piece(chess,piece);
	Chess.whitePlayerTurn(chess, boolTurn);
	check(boolTurn == true);
	
	
} or {
	Pawn.colour(piece, ::White); //Two steps
	find squareForPiece(piece, squarePiece);
	find N(squarePiece, squareNorth);
	find N(squareNorth, square);
	neg find pieceOnSquaree(squareNorth);
	neg find pieceOnSquaree(square);
	Pawn.firstMove(piece, bool);
	check(bool == true);
	Chess.whitePlayer.piece(chess,piece);
	Chess.whitePlayerTurn(chess, boolTurn);
	check(boolTurn == true);
} or {
	Pawn.colour(piece, ::White);
	find squareForPiece(piece, squarePiece);
	find NW(squarePiece, square);
	find squareContainsBlackPiece(square);
	Chess.whitePlayer.piece(chess,piece);
	Chess.whitePlayerTurn(chess, boolTurn);
	check(boolTurn == true);
} or {
	Pawn.colour(piece, ::White);
	find squareForPiece(piece, squarePiece);
	find NE(squarePiece, square);
	find squareContainsBlackPiece(square);
	Chess.whitePlayer.piece(chess,piece);
	Chess.whitePlayerTurn(chess, boolTurn);
	check(boolTurn == true);
} or {
	Pawn.colour(piece, ::White);
	find squareForPiece(piece, pieceSquare);
	find W(pieceSquare, atackingSquare);
	find pieceOnSquare(atackingSquare, atackingPawn);
	find canAttack(piece, atackingPawn);
	Pawn.enPassantEnabled(atackingPawn, bool);
	check(bool == true);
	find N(atackingSquare, square);
	Chess.whitePlayerTurn(chess, boolTurn);
	Chess.whitePlayer.piece(chess,piece);
	check(boolTurn == true);
} or {
	Pawn.colour(piece, ::White);
	find squareForPiece(piece, pieceSquare);
	find E(pieceSquare, atackingSquare);
	find pieceOnSquare(atackingSquare, atackingPawn);
	find canAttack(piece, atackingPawn);
	Pawn.enPassantEnabled(atackingPawn, bool);
	check(bool == true);
	find N(atackingSquare, square);
	Chess.whitePlayer.piece(chess,piece);
	Chess.whitePlayerTurn(chess, boolTurn);
	check(boolTurn == true);
}
